# -*- coding: utf-8 -*-
"""D599_task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1shsywDcERZlNWI-AQY2HJxWUg_MmIKWx
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import pearsonr
from scipy.stats import chi2_contingency



"""####Part 1: Univariate and Bivariate Statiscal Analysis and Visualization####"""

#Load Dataset
df = pd.read_excel('/content/drive/MyDrive/Health Insurance Dataset.xlsx')
#Limit datset to required 1338 rows
df = df.iloc[:1338]
df

#Check for missing values
missing_values = df.isnull().sum()
print(missing_values)

"""####Univariate Analysis####"""

# Descriptive statistics for Age
age_stats = df['age'].describe(percentiles=[.25, .5, .75]).T
age_stats['skew'] = df['age'].skew()
age_stats['mode'] = df['age'].mode()[0]

# Display results for Age
print("Descriptive Statistics for Age:")
print(age_stats)

# Descriptive statistics for Charges
df['charges'] = pd.to_numeric(df['charges'], errors='coerce')
charges_stats = df['charges'].describe(percentiles=[.25, .5, .75]).T
charges_stats['skew'] = df['charges'].skew()
charges_stats['mode'] = df['charges'].mode()[0]

# Display results for Charges
print("Descriptive Statistics for Charges:")
print(charges_stats)

# Compute relative frequency for Sex
print("Relative Frequency for Sex:\n")
print(df['sex'].value_counts(normalize=True).mul(100).round(2).astype(str) + '%')
print("\n")

# Compute relative frequency for Smoker
print("Relative Frequency for Smoker:\n")
print(df['smoker'].value_counts(normalize=True).mul(100).round(2).astype(str) + '%')
print("\n")

#Continuous Variables:Age and Charges
sns.histplot(df['age'], kde=True)
plt.title('Age Distribution')
plt.show()

sns.histplot(df['charges'], kde=True)
plt.title('Charges Distribution')
plt.show()

#Categorical Variables:Sex and Smoker
df['sex'].value_counts().plot(kind='bar')
plt.title('Sex Distribution')
plt.xlabel('Sex')
plt.ylabel('Count')
plt.show()

df['smoker'].value_counts().plot(kind='bar')
plt.title('Smoker Distribution')
plt.xlabel('Smoker')
plt.ylabel('Count')
plt.show()

"""####Bivariate Analysis####"""

# Calculate Pearson correlation
correlation, p_value = pearsonr(df['bmi'], df['charges'])
print(f"Pearson Correlation: {correlation:.3f}, P-value: {p_value:.3f}")

# Scatter plot
sns.scatterplot(x=df['bmi'], y=df['charges'])
plt.title('Scatter Plot: BMI vs Charges')
plt.xlabel('BMI')
plt.ylabel('Charges')
plt.show()



# Create cross-tabulation for region vs smoker
cross_tab = pd.crosstab(df['region'], df['smoker'])

# Perform Chi-Square Test
chi2_stat, p_value, dof, expected = chi2_contingency(cross_tab)

# Compute Cramér’s V
n = cross_tab.sum().sum()
cramers_v = np.sqrt(chi2_stat / (n * (min(cross_tab.shape) - 1)))

# Print statistical results
print(f"Chi-Square Test: Chi2-statistic = {chi2_stat:.3f}, P-value = {p_value:.3f}")
print(f"Cramér’s V: {cramers_v:.3f}")

# Normalize cross-tabulation for visualization
cross_tab_norm = pd.crosstab(df['region'], df['smoker'], normalize='index')

# Create a stacked bar chart
cross_tab_norm.plot(kind='bar', stacked=True, color=['green', 'red'])

# Customize chart
plt.title('Stacked Bar Chart: Region vs Smoker')
plt.xlabel('Region')
plt.ylabel('Proportion')
plt.legend(title='Smoker Status', labels=['Non-Smoker', 'Smoker'])
plt.show()

"""####Part 2 Parametric Statistical Testing####"""

import scipy.stats as stats

# Ensure BMI column is numeric
df['bmi'] = pd.to_numeric(df['bmi'], errors='coerce')

# Separate BMI data by gender
male_bmi = df[df['sex'] == 'male']['bmi']
female_bmi = df[df['sex'] == 'female']['bmi']

# Perform Shapiro-Wilk test for normality
shapiro_male = stats.shapiro(male_bmi)
shapiro_female = stats.shapiro(female_bmi)

print(f"Shapiro-Wilk Test (Male BMI): p-value = {shapiro_male.pvalue:.3f}")
print(f"Shapiro-Wilk Test (Female BMI): p-value = {shapiro_female.pvalue:.3f}")

# Perform Levene’s Test for equal variance
levene_test = stats.levene(male_bmi, female_bmi)
print(f"Levene’s Test p-value: {levene_test.pvalue:.3f}")

# Perform T-Test (Welch’s T-Test if variances are unequal)
t_stat, p_value = stats.ttest_ind(male_bmi, female_bmi, equal_var=(levene_test.pvalue > 0.05))

print(f"T-Test Results: T-Statistic = {t_stat:.3f}, P-Value = {p_value:.3f}")

# Boxplot for BMI by gender
sns.boxplot(x=df['sex'], y=df['bmi'])
plt.title('BMI Distribution by Gender')
plt.show()

"""###Part 3 Nonparametric Statistical Testing####"""

# Create a cross-tabulation table
cross_tab = pd.crosstab(df['region'], df['smoker'])

# Perform Chi-Square Test
chi2_stat, p_value, dof, expected = chi2_contingency(cross_tab)

# Print results
print(f"Chi-Square Statistic: {chi2_stat:.3f}")
print(f"P-Value: {p_value:.3f}")
print(f"Degrees of Freedom: {dof}")

# Visualize cross-tab with a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(cross_tab, annot=True, cmap="Blues", fmt="d")
plt.title("Heatmap of Smokers by Region")
plt.xlabel("Smoker Status")
plt.ylabel("Region")
plt.show()