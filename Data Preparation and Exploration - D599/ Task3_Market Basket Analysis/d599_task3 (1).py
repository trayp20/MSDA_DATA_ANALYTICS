# -*- coding: utf-8 -*-
"""D599_task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mBg1XNXpeBwiNa6VzEdWf2TXagNDUr80
"""

import pandas as pd

"""#### Data Preparation and Analysis"""

df = pd.read_csv('/content/drive/MyDrive/Megastore_Dataset_Task_3 3.csv')
df

# C1a: Selecting categorical variables
selected_columns = ["OrderID", "ProductName", "PaymentMethod", "OrderPriority", "CustomerOrderSatisfaction"]
df_selected = df[selected_columns].copy()  # Use .copy() to avoid SettingWithCopyWarning

# C1b: Encoding categorical variables

## Encode ordinal variables safely using .loc[]
order_priority_map = {"Low": 1, "Medium": 2, "High": 3, "Critical": 4}
customer_satisfaction_map = {"Very Dissatisfied": 1, "Dissatisfied": 2, "Satisfied": 3, "Very Satisfied": 4}

df_selected.loc[:, "OrderPriority"] = df_selected["OrderPriority"].map(order_priority_map)
df_selected.loc[:, "CustomerOrderSatisfaction"] = df_selected["CustomerOrderSatisfaction"].map(customer_satisfaction_map)

## One-Hot Encoding for nominal variables
df_encoded = pd.get_dummies(df_selected, columns=["ProductName", "PaymentMethod"])

# C1c: Transactionalizing the data for market basket analysis
df_transactional = df_encoded.groupby("OrderID").max().drop(columns=["OrderPriority", "CustomerOrderSatisfaction"])

# Save the cleaned dataset
df_transactional.to_csv("Cleaned_Market_Basket_Dataset.csv", index=False)

print("Dataset prepared successfully for market basket analysis. Saved as 'Cleaned_Market_Basket_Dataset.csv'.")

"""####Data Summary and Implications"""

from mlxtend.frequent_patterns import apriori, association_rules

# Apply the Apriori algorithm
frequent_itemsets = apriori(df_transactional, min_support=0.01, use_colnames=True)

# Generate association rules
rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1.0)

# Save rules to CSV
rules.to_csv("Market_Basket_Rules.csv", index=False)

# Display the first few rules
print("Association rules generated successfully. Saved as 'Market_Basket_Rules.csv'.")
print(rules.head())

# Select key metrics: Support, Confidence, and Lift
rules_selected = rules[["antecedents", "consequents", "support", "confidence", "lift"]]

# Save extracted values
rules_selected.to_csv("Support_Lift_Confidence_Values.csv", index=False)

# Display the first few rows
print("Support, Lift, and Confidence values saved as 'Support_Lift_Confidence_Values.csv'.")
print(rules_selected.head())

# Extract top 3 association rules based on highest lift values
top_rules = rules.nlargest(3, "lift")

# Save and display the top 3 rules
top_rules.to_csv("Top_3_Association_Rules.csv", index=False)
print("Top 3 association rules saved as 'Top_3_Association_Rules.csv'.")
print(top_rules)